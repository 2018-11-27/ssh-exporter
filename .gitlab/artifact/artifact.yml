releaseArtifact:
  image: $BASE_ARTIFACT_IMAGE #harbor.lenovo.com/base/artifact:latest
  stage: artifact
  rules: !reference [.defaultRules, branches]
  script:
    # You should add or modify your artifact commands in this scope
    # Start
    - |-
      bash
      if [[ -z $artifactType ]]; then
        export artifactType="release"
      fi
      docker buildx create \
                  --use \
                  --name=builder \
                  --bootstrap \
                  --driver docker-container \
                  --driver-opt image=$BASE_BUILDKIT_IMAGE
      arrayNames=(`echo $artifactFullNames | tr ',' ' '` )
      echo "$arrayNames"
      namesNum=${#arrayNames[@]}
      echo "$namesNum"
      arrayConfigs=(`echo $artifactConfigs | tr ',' ' '` )
      echo "$arrayConfigs"
      configsNum=${#arrayConfigs[@]}
      echo "$configsNum"
      # 使用一个制品打包配置文件生成多个制品
      if [ $configsNum -eq 1 ]
      then
        for artifact in ${arrayNames[@]}
        do
          docker buildx build \
                  . \
                  -t $artifact:$artifactVersion \
                  --no-cache \
                  -f ${arrayConfigs[0]} \
                  --push \
                  --platform linux/amd64,linux/arm64 \
                  --build-arg artifactVersion=$artifactVersion \
                  --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
                  --build-arg artifactRef=$CI_COMMIT_REF_NAME \
                  --build-arg artifactType=$artifactType \
                  --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
        done
      else
        # 制品名称数量必须与打包制品配置文件数量保持一致
        if [ $namesNum -ne $configsNum ]
        then
          echo "制品名称数量对应的打包制品配置文件数量不一致,任务失败!"
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Failed"
          exit -1
        else
          for ((i=0; i<$namesNum; i++))
          do
            docker buildx build \
                          -t ${arrayNames[$i]}:$artifactVersion \
                          --no-cache \
                          . \
                          -f ${arrayConfigs[$i]} \
                          --push \
                          --platform linux/amd64,linux/arm64 \
                          --build-arg artifactVersion=$artifactVersion \
                          --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
                          --build-arg artifactRef=$CI_COMMIT_REF_NAME \
                          --build-arg artifactType=$artifactType \
                          --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
          done
        fi
      fi
      echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Sucessfully"
    # End
  tags:
    - mec-runner

masterArtifact:
  image: $BASE_ARTIFACT_IMAGE #harbor.lenovo.com/base/artifact:latest
  stage: artifact
  variables:
    artifactVersion: latest
  script:
    # You should add or modify your artifact commands in this scope
    # Start
    - |-
      bash
      docker buildx create \
                  --use \
                  --name=builder \
                  --bootstrap \
                  --driver docker-container \
                  --driver-opt image=$BASE_BUILDKIT_IMAGE \
                  --platform linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/386,linux/ppc64le,linux/s390x
      arrayNames=(`echo $artifactFullNames | tr ',' ' '` )
      echo "$arrayNames"
      namesNum=${#arrayNames[@]}
      echo "$namesNum"
      arrayConfigs=(`echo $artifactConfigs | tr ',' ' '` )
      echo "$arrayConfigs"
      configsNum=${#arrayConfigs[@]}
      echo "$configsNum"
      # 使用一个制品打包配置文件生成多个制品
      if [ $configsNum -eq 1 ]
      then
        for artifact in ${arrayNames[@]}
        do
          #docker build . -f ${arrayConfigs[0]} --build-arg artifactVersion=$artifactVersion \
          #              --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
          #              --build-arg artifactRef=$CI_COMMIT_REF_NAME \
          #              --build-arg artifactType=latest \
          #              --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
          docker buildx build \
                  . \
                  -t $artifact:$artifactVersion \
                  --no-cache \
                  -f ${arrayConfigs[0]} \
                  --push \
                  --platform linux/amd64,linux/arm64 \
                  --build-arg artifactVersion=$artifactVersion \
                  --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
                  --build-arg artifactRef=$CI_COMMIT_REF_NAME \
                  --build-arg artifactType=latest \
                  --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
        done
      else
        # 制品名称数量必须与打包制品配置文件数量保持一致
        if [ $namesNum -ne $configsNum ]
        then
          echo "制品名称数量对应的打包制品配置文件数量不一致,任务失败!"
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Failed"
          exit -1
        else
          for ((i=0; i<$namesNum; i++))
          do
            #docker build . -f ${arrayConfigs[0]} --build-arg artifactVersion=$artifactVersion \
            #            --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
            #            --build-arg artifactRef=$CI_COMMIT_REF_NAME \
            #            --build-arg artifactType=latest \
            #            --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
            docker buildx build \
                          -t ${arrayNames[$i]}:$artifactVersion \
                          --no-cache \
                          . \
                          -f ${arrayConfigs[$i]} \
                          --push \
                          --platform linux/amd64,linux/arm64 \
                          --build-arg artifactVersion=$artifactVersion \
                          --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
                          --build-arg artifactRef=$CI_COMMIT_REF_NAME \
                          --build-arg artifactType=latest \
                          --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
          done
        fi
      fi
      echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Sucessfully"
    # End
  tags:
    - mec-runner
  only:
    - master

mRArtifact:
  image: $BASE_ARTIFACT_IMAGE #harbor.lenovo.com/base/artifact:latest
  stage: artifact
  variables:
    artifactVersion: $CI_COMMIT_SHORT_SHA
  script:
    # You should add or modify your artifact commands in this scope
    # Start
    - |-
      bash
      architectures=linux/amd64,linux/arm64
      if [ $enableMrMultiArch = false ]
      then
        architectures=linux/amd64
      fi
      docker buildx create \
                  --use \
                  --name=builder \
                  --bootstrap \
                  --driver docker-container \
                  --driver-opt image=$BASE_BUILDKIT_IMAGE
      arrayNames=(`echo $artifactFullNames | tr ',' ' '` )
      namesNum=${#arrayNames[@]}
      arrayConfigs=(`echo $artifactConfigs | tr ',' ' '` )
      configsNum=${#arrayConfigs[@]}
      echo "$arrayNames"
      # 使用一个制品打包配置文件生成多个制品
      if [ $configsNum -eq 1 ]
      then
        for artifact in ${arrayNames[@]}
        do
          docker buildx build \
                      . \
                      -t $artifact:$artifactVersion \
                      --no-cache \
                      -f ${arrayConfigs[0]} \
                      --push \
                      --platform $architectures \
                      --build-arg artifactVersion=$artifactVersion \
                      --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
                      --build-arg artifactRef=$CI_COMMIT_REF_NAME \
                      --build-arg artifactType=mr \
                      --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
        done
      else
        # 制品名称数量必须与打包制品配置文件数量保持一致
        if [ $namesNum -ne $configsNum ]
        then
          echo "制品名称数量对应的打包制品配置文件数量不一致,任务失败!"
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Failed"
          exit -1
        else
          for ((i=0; i<$namesNum; i++))
          do
            docker buildx build \
                    -t ${arrayNames[$i]}:$artifactVersion \
                    --no-cache \
                    . \
                    -f ${arrayConfigs[$i]} \
                    --push \
                    --platform $architectures \
                    --build-arg artifactVersion=$artifactVersion \
                    --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
                    --build-arg artifactRef=$CI_COMMIT_REF_NAME \
                    --build-arg artifactType=mr \
                    --build-arg BASE_BUILD_IMAGE=$artifactBuildImage

          done
        fi
      fi
      echo "project name $CI_PROJECT_NAME Mr $CI_MERGE_REQUEST_REF_PATH Artifact Stage Sucessfully"
    # End
  tags:
    - mec-runner
  only:
    - merge_requests

#stagingArtifact:
#  image: $BASE_ARTIFACT_IMAGE #harbor.lenovo.com/base/artifact:latest
#  stage: artifact
#  variables:
#    artifactVersion: $CI_COMMIT_SHORT_SHA
#  script:
#    # You should add or modify your artifact commands in this scope
#    # Start
#    - |-
#      bash
#      docker buildx create \
#                  --use \
#                  --name=builder \
#                  --bootstrap \
#                  --driver docker-container \
#                  --driver-opt image=$BASE_BUILDKIT_IMAGE
#      arrayNames=(`echo $artifactFullNames | tr ',' ' '` )
#      echo "$arrayNames"
#      namesNum=${#arrayNames[@]}
#      echo "$namesNum"
#      arrayConfigs=(`echo $artifactConfigs | tr ',' ' '` )
#      echo "$arrayConfigs"
#      configsNum=${#arrayConfigs[@]}
#      echo "$configsNum"
#      # 使用一个制品打包配置文件生成多个制品
#      if [ $configsNum -eq 1 ]
#      then
#        for artifact in ${arrayNames[@]}
#        do
#          docker buildx build . -t $artifact:$artifactVersion --no-cache -f ${arrayConfigs[0]} --push --platform linux/amd64,linux/arm64
#        done
#      else
#        # 制品名称数量必须与打包制品配置文件数量保持一致
#        if [ $namesNum -ne $configsNum ]
#        then
#          echo "制品名称数量对应的打包制品配置文件数量不一致,任务失败!"
#          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Failed"
#          exit -1
#        else
#          for ((i=0; i<$namesNum; i++))
#          do
#            docker build -t ${arrayNames[$i]}:$artifactVersion --no-cache . -f ${arrayConfigs[$i]} --push --platform linux/amd64,linux/arm64
#          done
#        fi
#      fi
#      echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Sucessfully"
#    # End
#  tags:
#    - mec-runner
#  only:
#    - /^staging-.*$/

othersArtifact:
  image: $BASE_ARTIFACT_IMAGE  #harbor.lenovo.com/base/artifact:latest
  stage: artifact
  variables:
    artifactVersion: $CI_COMMIT_SHORT_SHA
  script:
    # You should add or modify your artifact commands in this scope
    # Start
    - |-
      bash
      docker buildx create \
                  --use \
                  --name=builder \
                  --bootstrap \
                  --driver docker-container \
                  --driver-opt image=$BASE_BUILDKIT_IMAGE
      arrayNames=(`echo $artifactFullNames | tr ',' ' '` )
      echo "$arrayNames"
      namesNum=${#arrayNames[@]}
      echo "$namesNum"
      arrayConfigs=(`echo $artifactConfigs | tr ',' ' '` )
      echo "$arrayConfigs"
      configsNum=${#arrayConfigs[@]}
      echo "$configsNum"
      # 使用一个制品打包配置文件生成多个制品
      if [ $configsNum -eq 1 ]
      then
        for artifact in ${arrayNames[@]}
        do
          docker buildx build \
              . \
              -t $artifact:$artifactVersion \
              --no-cache \
              -f ${arrayConfigs[0]} \
              --push \
              --platform linux/amd64,linux/arm64 \
              --build-arg artifactVersion=$CI_COMMIT_SHORT_SHA \
              --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
              --build-arg artifactRef=$CI_COMMIT_REF_NAME \
              --build-arg artifactType=others \
              --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
        done
      else
        # 制品名称数量必须与打包制品配置文件数量保持一致
        if [ $namesNum -ne $configsNum ]
        then
          echo "制品名称数量对应的打包制品配置文件数量不一致,任务失败!"
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Failed"
          exit -1
        else
          for ((i=0; i<$namesNum; i++))
          do
            docker buildx build \
                        -t ${arrayNames[$i]}:$artifactVersion \
                        --no-cache \
                        . \
                        -f ${arrayConfigs[$i]} \
                        --push \
                        --platform linux/amd64,linux/arm64 \
                        --build-arg artifactVersion=$CI_COMMIT_SHORT_SHA \
                        --build-arg artifactDateTime=`date '+%Y%m%d%H%M%S'` \
                        --build-arg artifactRef=$CI_COMMIT_REF_NAME \
                        --build-arg artifactType=others \
                        --build-arg BASE_BUILD_IMAGE=$artifactBuildImage
          done
        fi
      fi
      echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Artifact Stage Sucessfully"
    # End
  tags:
    - mec-runner
  except:
    - master
    - /^staging-.*$/
    - lecp-id
    - /^release-.*$/
    - merge_requests
    - mepm-cucc
