releaseUpgrade:
  image: $BASE_UPGRADE_IMAGE #harbor.lenovo.com/base/upgrade:latest
  stage: upgrade
  allow_failure: true
  rules: !reference [.defaultRules, branches]
  script:
    # You should add or modify your upgrade commands in this scope
    # Start
    - |-
      bash
      set -x
      if [ $disableReleaseStaging = true ]
      then
        echo "You Have Disable Release Upgrade Staging.So I Will Exit Now!"
        exit 0
      fi
      upgradeArrayNames=(`echo $upgradeFullNames | tr ',' ' '` )
      for ((i=0; i<${#upgradeArrayNames[*]}; i++))
      do
        #export DOCKER_HOST=$DOCKER_HOST
        export DOCKER_HOST=unix:///var/run/docker.sock
        docker run \
                -d \
                --rm \
                --pull=always \
                --network host \
                --entrypoint /bin/bash \
                $BASE_UPGRADE_RUNNER_IMAGE \
                -c \
                "\
                chmod +x /bin/sleep \
                && sleep 100000 \
                " > ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion
        docker exec -e PROJECT_NAME=$CI_PROJECT_PATH_SLUG -e REF=$CI_COMMIT_REF_NAME `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion` \
                  bash -c \
                  "\
                  export DOCKER_HOST=$DOCKER_HOST \
                  && sh /upgrade.sh ${upgradeArrayNames[$i]}:$upgradeVersion > /tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                  && echo $? > /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion \
                  && ls -lrt /tmp && cat /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion \
                  "
        #Start log
        docker cp `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion`:/tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                                                                                          log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        cat log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        rm -rf /tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        #End log

        #Start status
        docker cp \
          `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion`:/tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion \
        $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion
        runStatus=`cat $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion`
        rm -rf $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion
        #End status
        if [ $runStatus -ne 0 ]; then
          docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion` \
          && docker rm `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion` -f
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage Failed"
          exit -1
        fi
        docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion` \
        && docker rm `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion` -f
      done
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage sucessfully"
    # End
  tags:
    - mec-runner

masterUpgrade:
  image: $BASE_UPGRADE_IMAGE #harbor.lenovo.com/base/upgrade:latest
  stage: upgrade
  allow_failure: true
  variables:
    upgradeVersion: latest
    upgradeFullName: $publishFullName
  script:
    # You should add or modify your upgrade commands in this scope
    # Start
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage sucessfully"
    # End
  tags:
    - mec-runner
  only:
    - master

mRUpgrade:
  image: $BASE_UPGRADE_IMAGE #harbor.lenovo.com/base/upgrade:latest
  stage: upgrade
  retry: 2
  variables:
    upgradeVersion: $CI_COMMIT_SHORT_SHA
    BASE_UPGRADE_RUNNER_IMAGE: harbor.lenovo.com/base/upgrade-runner:latest
  script:
    # You should add or modify your upgrade commands in this scope
    # Start
    - |-
      bash
      set -x
      if [ $disableMrStaging = true ]
      then
        echo "You Have Disable Mr Upgrade Staging.So I Will Exit Now!"
        exit 0
      fi
      if [[ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" =~ ^release-.*$ ]] || [[ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" = "master" ]]; then
          echo "Merge Request Target Branch "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      else
          echo "Project Name $CI_PROJECT_NAME Branch $CI_COMMIT_REF_SLUG Upgrade Stage Sucessfully."
          echo "But You Should Understand Upgrade Stage Have Been Skip"
          exit 0
      fi
      upgradeArrayNames=(`echo $upgradeFullNames | tr ',' ' '` )
      for ((i=0; i<${#upgradeArrayNames[*]}; i++))
      do
        export DOCKER_HOST=unix:///var/run/docker.sock
        docker run \
                -d \
                --rm \
                --pull=always \
                --network host \
                --entrypoint /bin/bash \
                $BASE_UPGRADE_RUNNER_IMAGE \
                -c \
                "\
                chmod +x /bin/sleep \
                && sleep 100000 \
                " > ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        docker exec -e PROJECT_NAME=$CI_PROJECT_PATH_SLUG -e REF=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` \
                  bash -c \
                  "\
                  export DOCKER_HOST=$DOCKER_HOST \
                  && sh /upgrade.sh ${upgradeArrayNames[$i]}:$upgradeVersion > /tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                  && echo $? > /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA \
                  && ls -lrt /tmp && cat /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA \
                  "
        docker cp `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA`:/tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                                                                                          log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        cat log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        rm -rf log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        docker cp \
          `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA`:/tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA \
        $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        runStatus=`cat $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA`
        rm -rf $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        if [ $runStatus -ne 0 ]; then
          docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` \
          && docker rm `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` -f
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage Failed"
          exit -1
        fi
        docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` \
        && docker rm `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` -f
      done
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage sucessfully"
    # End
  tags:
    - mec-runner
  only:
    - merge_requests

stagingUpgrade:
  image: $BASE_UPGRADE_IMAGE #harbor.lenovo.com/base/upgrade:latest
  stage: upgrade
  allow_failure: true
  variables:
    upgradeVersion: $CI_COMMIT_SHORT_SHA
  script:
    # You should add or modify your upgrade commands in this scope
    # Start
    # - |-
    #   array=(`echo $destinationClusters | tr ',' ' '` )
    #   echo "$array"
    #   for host in ${array[@]}
    #   do
    #     echo "$host $destinationHostDomainName" >> /etc/hosts
    #     kubectl scale --replicas=0 deployment $deployment_name -n $namespace --kubeconfig=.gitlab/deploy/.kube/$host
    #     kubectl set image deployment $deployment_name *=$project:$upgradeVersion -n $namespace --kubeconfig=.gitlab/deploy/.kube/$host
    #     kubectl scale --replicas=1 deployment $deployment_name -n $namespace --kubeconfig=.gitlab/deploy/.kube/$host
    #   done
    echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage sucessfully"
    #    - "echo \"10.121.12.134 apiserver.cluster.local\" >> /etc/hosts"
    #    - echo "$project:$upgradeVersion"
    #    - echo "$namespace"
    #    - kubectl scale --replicas=0 deployment $deployment_name -n $namespace --kubeconfig=.gitlab/.kube_env/10.121.12.134/admin.conf
    #    - kubectl set image deployment $deployment_name *=$project:$upgradeVersion -n $namespace --kubeconfig=.gitlab/.kube_env/10.121.12.134/admin.conf
    #    - kubectl scale --replicas=1 deployment $deployment_name -n $namespace --kubeconfig=.gitlab/.kube_env/10.121.12.134/admin.conf
    # End
  tags:
    - mec-runner
  only:
    - /^staging-.*$/
    - staging

lecpIdUpgrade:
  image: $BASE_UPGRADE_IMAGE #harbor.lenovo.com/base/upgrade:latest
  stage: upgrade
  allow_failure: true
  variables:
    upgradeVersion: lecp-id-$CI_COMMIT_SHORT_SHA
    upgradeFullName: $publishFullName
  script:
    # You should add or modify your upgrade commands in this scope
    # Start
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage sucessfully"
    # End
  tags:
    - mec-runner
  only:
    - lecp-id

othersUpgrade:
  image: $BASE_UPGRADE_IMAGE  #harbor.lenovo.com/base/upgrade:latest
  stage: upgrade
  allow_failure: true
  variables:
    upgradeVersion: $CI_COMMIT_SHORT_SHA
    upgradeFullName: $publishFullName
  script:
    # You should add or modify your upgrade commands in this scope
    # Start
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG Upgrade stage sucessfully"
    # End
  tags:
    - mec-runner
  except:
    - master
    - /^staging-.*$/
    - staging
    - lecp-id
    - /^release-.*$/
    - merge_requests
    - staging
