releaseE2e:
  image: $BASE_E2E_IMAGE #harbor.lenovo.com/base/notify:latest
  stage: e2e
  allow_failure: true
  rules: !reference [.defaultRules, branches]
  tags:
    - mec-runner
  script:
    # You should add your e2e commands in this scope
    # Start
    - echo "start project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage"
    - |-
      bash
      set -x
      if [ $disableReleaseStaging = true ]
      then
        echo "You Have Disable Release E2E Staging.So I Will Exit Now!"
        exit 0
      fi
      e2eArrayNames=(`echo $upgradeFullNames | tr ',' ' '` )
      for ((i=0; i<${#e2eArrayNames[*]}; i++))
      do
        #export DOCKER_HOST=$DOCKER_HOST
        export DOCKER_HOST=unix:///var/run/docker.sock
        docker run \
                -d \
                --rm \
                --pull=always \
                --network host \
                --entrypoint /bin/bash \
                $BASE_E2E_RUNNER_IMAGE \
                -c \
                "\
                chmod +x /bin/sleep \
                && sleep 100000 \
                " > ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion
        docker exec -e PROJECT_NAME=$CI_PROJECT_PATH_SLUG -e REF=$CI_COMMIT_REF_NAME `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$upgradeVersion` \
                  bash -c \
                  "\
                  export DOCKER_HOST=$DOCKER_HOST \
                  && python3 run.py ${e2eArrayNames[$i]}:$e2eVersion > /tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                  && echo $? > /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion \
                  && ls -lrt /tmp && cat /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion \
                  "
        #Start log
        docker cp `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion`:/tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                                                                                          log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        cat log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        rm -rf /tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        #End log

        #Start status
        docker cp \
          `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion`:/tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion \
        $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion
        runStatus=`cat $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion`
        rm -rf $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion
        #End status
        if [ $runStatus -ne 0 ]; then
          docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion`
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage Failed"
          exit -1
        fi
        docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$e2eVersion`
      done
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage sucessfully"
    # End

masterE2e:
  image: $BASE_E2E_IMAGE #harbor.lenovo.com/base/notify:latest
  stage: e2e
  allow_failure: true
  only:
    - master
  tags:
    - mec-runner
  script:
    # You should add your e2e commands in this scope
    # Start
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage sucessfully"
    # End

mRE2e:
  image: $BASE_E2E_IMAGE
  stage: e2e
  only:
    - merge_requests
  tags:
    - mec-runner
  retry: 2
  variables:
    e2eVersion: $CI_COMMIT_SHORT_SHA
    BASE_E2E_RUNNER_IMAGE: harbor.lenovo.com/lecp/e2-runner:latest
  script:
    # You should add your e2e commands in this scope
    # Start
    - echo "start project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage"
    - |-
      bash
      set -x
      if [ $disableMrStaging = true ]
      then
        echo "You Have Disable Mr Upgrade Staging.So I Will Exit Now!"
        exit 0
      fi
      if [[ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" =~ ^release-.*$ ]] || [[ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" = "master" ]]; then
          echo "merge request target branch "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      else
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage sucessfully"
          exit 0
      fi
      upgradeArrayNames=(`echo $upgradeFullNames | tr ',' ' '` )
      for ((i=0; i<${#upgradeArrayNames[*]}; i++))
      do

        export DOCKER_HOST=unix:///var/run/docker.sock
        docker run \
                -d \
                --rm \
                --pull=always \
                --network host \
                --entrypoint /bin/bash \
                $BASE_E2E_RUNNER_IMAGE \
                -c \
                "\
                chmod +x /bin/sleep \
                && sleep 100000 \
                " > ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        docker exec -e PROJECT_NAME=$CI_PROJECT_PATH_SLUG -e REF=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` \
                  bash -c \
                  "\
                  export DOCKER_HOST=$DOCKER_HOST \
                  && cd /opt/healthcheck  \
                  && python3 run.py ${upgradeArrayNames[$i]}:$e2eVersion > /tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                  && echo $? > /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA \
                  && ls -lrt /tmp && cat /tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA \
                  "
        docker cp \
          `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA`:/tmp/$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA \
        $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        docker cp `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA`:/tmp/log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID \
                                                                                  log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        cat log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        rm -rf log-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID
        runStatus=`cat $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA`
        rm -rf $CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        if [ $runStatus -ne 0 ]; then
          docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` \
          && docker rm `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` -f
          echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage Failed"
          exit -1
        fi
        docker stop `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA`
        #&& docker rm `cat ID-$CI_PIPELINE_ID-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA` -f
      done
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage sucessfully"

    # End

stagingE2e:
  image: $BASE_E2E_IMAGE #harbor.lenovo.com/base/notify:latest
  stage: e2e
  allow_failure: true
  only:
    - /^staging-.*$/
  tags:
    - mec-runner
  script:
    # You should add your e2e commands in this scope
    # Start
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage sucessfully"
    # End

othersE2e:
  image: $BASE_E2E_IMAGE #harbor.lenovo.com/base/notify:latest
  stage: e2e
  allow_failure: true
  except:
    - master
    - /^staging-.*$/
    - /^release-.*$/
    - merge_requests
  tags:
    - mec-runner
  script:
    # You should add your e2e commands in this scope
    # Start
    - echo "project name $CI_PROJECT_NAME branch $CI_COMMIT_REF_SLUG E2E stage sucessfully"
    # End
